"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _path = _interopRequireDefault(require("path"));

var _url = _interopRequireDefault(require("url"));

var _appiumBaseDriver = require("appium-base-driver");

var _appiumSupport = require("appium-support");

var _teen_process = require("teen_process");

var _asyncbox = require("asyncbox");

var _portscanner = require("portscanner");

var _child_process = require("child_process");

var _utils = require("./utils");

const log = _appiumSupport.logger.getLogger('WebDriverAgentMac');

const ROOT_DIR = _path.default.basename(__dirname) === 'lib' ? _path.default.resolve(__dirname, process.env.NO_PRECOMPILE ? '..' : '../..') : __dirname;

const DEFAULT_WDA_ROOT = _path.default.resolve(ROOT_DIR, 'WebDriverAgentMac');

const WDA_PROJECT_NAME = 'WebDriverAgentMac.xcodeproj';

const WDA_PROJECT = (wdaRoot = DEFAULT_WDA_ROOT) => _path.default.resolve(wdaRoot, WDA_PROJECT_NAME);

const RUNNER_SCHEME = 'WebDriverAgentRunner';
const DISABLE_STORE_ARG = 'COMPILER_INDEX_STORE_ENABLE=NO';
const XCODEBUILD = 'xcodebuild';
const STARTUP_TIMEOUT_MS = 120000;
const DEFAULT_SYSTEM_PORT = 10100;
const DEFAULT_SYSTEM_HOST = '127.0.0.1';
const DEFAULT_SHOW_SERVER_LOGS = false;
const RUNNING_PROCESS_IDS = [];

const RECENT_UPGRADE_TIMESTAMP_PATH = _path.default.join('.appium', 'webdriveragent_mac', 'upgrade.time');

async function getUpgradeTimestamp() {
  const packageManifest = _path.default.resolve(ROOT_DIR, 'package.json');

  if (!(await _appiumSupport.fs.exists(packageManifest))) {
    return null;
  }

  const {
    mtime
  } = await _appiumSupport.fs.stat(packageManifest);
  return mtime.getTime();
}

async function cleanupObsoleteProcesses() {
  if (!_lodash.default.isEmpty(RUNNING_PROCESS_IDS)) {
    log.debug(`Cleaning up ${RUNNING_PROCESS_IDS.length} obsolete ` + _appiumSupport.util.pluralize('process', RUNNING_PROCESS_IDS.length, false));

    try {
      await (0, _teen_process.exec)('kill', ['-9', ...RUNNING_PROCESS_IDS]);
    } catch (ign) {}

    _lodash.default.pullAll(RUNNING_PROCESS_IDS, RUNNING_PROCESS_IDS);
  }
}

process.once('exit', () => {
  if (!_lodash.default.isEmpty(RUNNING_PROCESS_IDS)) {
    try {
      (0, _child_process.execSync)(`kill -9 ${RUNNING_PROCESS_IDS.join(' ')}`);
    } catch (ign) {}

    _lodash.default.pullAll(RUNNING_PROCESS_IDS, RUNNING_PROCESS_IDS);
  }
});

class WDAMacProxy extends _appiumBaseDriver.JWProxy {
  async proxyCommand(url, method, body = null) {
    if (this.didProcessExit) {
      throw new _appiumBaseDriver.errors.InvalidContextError(`'${method} ${url}' cannot be proxied to Mac2 Driver server because ` + 'its process is not running (probably crashed). Check the Appium log for more details');
    }

    return await super.proxyCommand(url, method, body);
  }

}

class WDAMacProcess {
  constructor() {
    this.showServerLogs = DEFAULT_SHOW_SERVER_LOGS;
    this.port = DEFAULT_SYSTEM_PORT;
    this.host = DEFAULT_SYSTEM_HOST;
    this.bootstrapRoot = DEFAULT_WDA_ROOT;
    this.proc = null;
  }

  get isRunning() {
    var _this$proc;

    return !!((_this$proc = this.proc) === null || _this$proc === void 0 ? void 0 : _this$proc.isRunning);
  }

  get pid() {
    return this.isRunning ? this.proc.pid : null;
  }

  async listChildrenPids() {
    return this.pid ? await (0, _utils.listChildrenProcessIds)(this.pid) : [];
  }

  async isFreshUpgrade() {
    const homeFolder = process.env.HOME;

    if (!homeFolder) {
      log.info('The HOME folder path cannot be determined');
      return false;
    }

    const currentUpgradeTimestamp = await getUpgradeTimestamp();

    if (!_lodash.default.isInteger(currentUpgradeTimestamp)) {
      log.info('It is impossible to determine the timestamp of the package');
      return false;
    }

    const timestampPath = _path.default.resolve(homeFolder, RECENT_UPGRADE_TIMESTAMP_PATH);

    if (await _appiumSupport.fs.exists(timestampPath)) {
      try {
        await _appiumSupport.fs.access(timestampPath, _appiumSupport.fs.W_OK);
      } catch (ign) {
        log.info(`WebDriverAgent upgrade timestamp at '${timestampPath}' is not writeable`);
        return false;
      }

      const recentUpgradeTimestamp = parseInt(await _appiumSupport.fs.readFile(timestampPath, 'utf8'), 10);

      if (_lodash.default.isInteger(recentUpgradeTimestamp)) {
        if (recentUpgradeTimestamp >= currentUpgradeTimestamp) {
          log.info(`WebDriverAgent sources are up to date ` + `(${recentUpgradeTimestamp} >= ${currentUpgradeTimestamp})`);
          return false;
        }

        log.info(`WebDriverAgent sources have been upgraded ` + `(${recentUpgradeTimestamp} < ${currentUpgradeTimestamp})`);
      } else {
        log.warn(`The recent upgrade timestamp at '${timestampPath}' is corrupted. Trying to fix it`);
      }
    }

    try {
      await (0, _appiumSupport.mkdirp)(_path.default.dirname(timestampPath));
      await _appiumSupport.fs.writeFile(timestampPath, `${currentUpgradeTimestamp}`, 'utf8');
      log.debug(`Stored the recent WebDriverAgent upgrade timestamp ${currentUpgradeTimestamp} ` + `at '${timestampPath}'`);
    } catch (e) {
      log.info(`Unable to create the recent WebDriverAgent upgrade timestamp at '${timestampPath}'. ` + `Original error: ${e.message}`);
      return false;
    }

    return true;
  }

  hasSameOpts({
    showServerLogs,
    systemPort,
    systemHost,
    bootstrapRoot
  }) {
    if (_lodash.default.isBoolean(showServerLogs) && this.showServerLogs !== showServerLogs || _lodash.default.isNil(showServerLogs) && this.showServerLogs !== DEFAULT_SHOW_SERVER_LOGS) {
      return false;
    }

    if (systemPort && this.port !== systemPort || !systemPort && this.port !== DEFAULT_SYSTEM_PORT) {
      return false;
    }

    if (systemHost && this.host !== systemHost || !systemHost && this.host !== DEFAULT_SYSTEM_HOST) {
      return false;
    }

    if (bootstrapRoot && this.bootstrapRoot !== bootstrapRoot || !bootstrapRoot && this.bootstrapRoot !== DEFAULT_WDA_ROOT) {
      return false;
    }

    return true;
  }

  async init(opts = {}) {
    var _opts$showServerLogs, _opts$systemPort, _opts$systemHost, _opts$bootstrapRoot;

    if (this.isRunning && this.hasSameOpts(opts)) {
      return false;
    }

    this.showServerLogs = (_opts$showServerLogs = opts.showServerLogs) !== null && _opts$showServerLogs !== void 0 ? _opts$showServerLogs : this.showServerLogs;
    this.port = (_opts$systemPort = opts.systemPort) !== null && _opts$systemPort !== void 0 ? _opts$systemPort : this.port;
    this.host = (_opts$systemHost = opts.systemHost) !== null && _opts$systemHost !== void 0 ? _opts$systemHost : this.host;
    this.bootstrapRoot = (_opts$bootstrapRoot = opts.bootstrapRoot) !== null && _opts$bootstrapRoot !== void 0 ? _opts$bootstrapRoot : this.bootstrapRoot;
    log.debug(`Using bootstrap root: ${this.bootstrapRoot}`);

    if (!(await _appiumSupport.fs.exists(WDA_PROJECT(this.bootstrapRoot)))) {
      throw new Error(`${WDA_PROJECT_NAME} does not exist at '${WDA_PROJECT(this.bootstrapRoot)}'. ` + `Was 'bootstrapRoot' set to a proper value?`);
    }

    await this.kill();
    await cleanupObsoleteProcesses();
    let xcodebuild;

    try {
      xcodebuild = await _appiumSupport.fs.which(XCODEBUILD);
    } catch (e) {
      throw new Error(`${XCODEBUILD} binary cannot be found in PATH. ` + `Please make sure that Xcode is installed on your system`);
    }

    log.debug(`Using ${XCODEBUILD} binary at '${xcodebuild}'`);

    if (await this.isFreshUpgrade()) {
      log.info('Performing project cleanup');
      const args = ['clean', '-project', WDA_PROJECT(this.bootstrapRoot), '-scheme', RUNNER_SCHEME];

      try {
        await (0, _teen_process.exec)(XCODEBUILD, args, {
          cwd: this.bootstrapRoot
        });
      } catch (e) {
        log.warn(`Cannot perform project cleanup. ` + `Original error: ${e.stderr || e.message}`);
      }
    }

    log.debug(`Using ${this.host} as server host`);
    log.debug(`Using port ${this.port}`);
    const isPortBusy = (await (0, _portscanner.checkPortStatus)(this.port, this.host)) === 'open';

    if (isPortBusy) {
      throw new Error(`The port #${this.port} at ${this.host} is busy. ` + `Consider setting 'systemPort' capability to another free port number and/or ` + `make sure the previous driver session(s) have been closed properly.`);
    }

    const args = ['build-for-testing', 'test-without-building', '-project', WDA_PROJECT(this.bootstrapRoot), '-scheme', RUNNER_SCHEME, DISABLE_STORE_ARG];
    const env = Object.assign({}, process.env, {
      USE_PORT: `${this.port}`,
      USE_HOST: this.host
    });
    this.proc = new _teen_process.SubProcess(xcodebuild, args, {
      cwd: this.bootstrapRoot,
      env
    });

    if (!this.showServerLogs) {
      log.info(`Mac2Driver host process logging is disabled. ` + `All the ${XCODEBUILD} output is going to be suppressed. ` + `Set the 'showServerLogs' capability to 'true' if this is an undesired behavior`);
    }

    this.proc.on('output', (stdout, stderr) => {
      if (!this.showServerLogs) {
        return;
      }

      const line = _lodash.default.trim(stdout || stderr);

      if (line) {
        log.debug(`[${XCODEBUILD}] ${line}`);
      }
    });
    this.proc.on('exit', (code, signal) => {
      log.info(`Mac2Driver host process has exited with code ${code}, signal ${signal}`);
    });
    log.info(`Starting Mac2Driver host process: ${XCODEBUILD} ${_appiumSupport.util.quote(args)}`);
    await this.proc.start(0);
    return true;
  }

  async stop() {
    if (!this.isRunning) {
      return;
    }

    const childrenPids = await this.listChildrenPids();

    if (!_lodash.default.isEmpty(childrenPids)) {
      try {
        await (0, _teen_process.exec)('kill', childrenPids);
      } catch (ign) {}
    }

    await this.proc.stop('SIGTERM', 3000);
  }

  async kill() {
    if (!this.isRunning) {
      return;
    }

    const childrenPids = await this.listChildrenPids();

    if (!_lodash.default.isEmpty(childrenPids)) {
      try {
        await (0, _teen_process.exec)('kill', ['-9', ...childrenPids]);
      } catch (ign) {}
    }

    try {
      await this.proc.stop('SIGKILL');
    } catch (ign) {}
  }

}

class WDAMacServer {
  constructor() {
    this.process = null;
    this.serverStartupTimeoutMs = STARTUP_TIMEOUT_MS;
    this.proxy = null;
    this.isProxyingToRemoteServer = false;
  }

  async isProxyReady(throwOnExit = true) {
    if (!this.proxy) {
      return false;
    }

    try {
      await this.proxy.command('/status', 'GET');
      return true;
    } catch (err) {
      if (throwOnExit && this.proxy.didProcessExit) {
        throw new Error(err.message);
      }

      return false;
    }
  }

  parseProxyProperties(caps) {
    let scheme = 'http';

    if (!caps.webDriverAgentMacUrl) {
      var _ref, _this$process$host, _this$process, _ref2, _this$process$port, _this$process2;

      return {
        scheme,
        server: (_ref = (_this$process$host = (_this$process = this.process) === null || _this$process === void 0 ? void 0 : _this$process.host) !== null && _this$process$host !== void 0 ? _this$process$host : caps.systemHost) !== null && _ref !== void 0 ? _ref : DEFAULT_SYSTEM_HOST,
        port: (_ref2 = (_this$process$port = (_this$process2 = this.process) === null || _this$process2 === void 0 ? void 0 : _this$process2.port) !== null && _this$process$port !== void 0 ? _this$process$port : caps.systemPort) !== null && _ref2 !== void 0 ? _ref2 : DEFAULT_SYSTEM_PORT,
        path: ''
      };
    }

    let parsedUrl;

    try {
      parsedUrl = new _url.default.URL(caps.webDriverAgentMacUrl);
    } catch (e) {
      throw new Error(`webDriverAgentMacUrl, '${caps.webDriverAgentMacUrl}', ` + `in the capabilities is invalid. ${e.message}`);
    }

    const {
      protocol,
      hostname,
      port,
      pathname
    } = parsedUrl;

    if (_lodash.default.isString(protocol)) {
      scheme = protocol.split(':')[0];
    }

    return {
      scheme,
      server: hostname !== null && hostname !== void 0 ? hostname : DEFAULT_SYSTEM_HOST,
      port: _lodash.default.isEmpty(port) ? DEFAULT_SYSTEM_PORT : _lodash.default.parseInt(port),
      path: pathname === '/' ? '' : pathname
    };
  }

  async startSession(caps) {
    var _caps$serverStartupTi;

    this.serverStartupTimeoutMs = (_caps$serverStartupTi = caps.serverStartupTimeout) !== null && _caps$serverStartupTi !== void 0 ? _caps$serverStartupTi : this.serverStartupTimeoutMs;
    this.isProxyingToRemoteServer = !!caps.webDriverAgentMacUrl;
    let wasProcessInitNecessary;

    if (this.isProxyingToRemoteServer) {
      if (this.process) {
        await this.process.kill();
        await cleanupObsoleteProcesses();
        this.process = null;
      }

      wasProcessInitNecessary = false;
    } else {
      if (!this.process) {
        this.process = new WDAMacProcess();
      }

      wasProcessInitNecessary = await this.process.init(caps);
    }

    if (wasProcessInitNecessary || this.isProxyingToRemoteServer || !this.proxy) {
      const {
        scheme,
        server,
        port,
        path
      } = this.parseProxyProperties(caps);
      this.proxy = new WDAMacProxy({
        scheme,
        server,
        port,
        base: path,
        keepAlive: true
      });
      this.proxy.didProcessExit = false;

      if (this.process) {
        this.process.proc.on('exit', () => {
          this.proxy.didProcessExit = true;
        });
      }

      const timer = new _appiumSupport.timing.Timer().start();

      try {
        await (0, _asyncbox.waitForCondition)(async () => await this.isProxyReady(), {
          waitMs: this.serverStartupTimeoutMs,
          intervalMs: 1000
        });
      } catch (e) {
        var _this$process3;

        if ((_this$process3 = this.process) === null || _this$process3 === void 0 ? void 0 : _this$process3.isRunning) {
          await this.process.kill();
        }

        if (/Condition unmet/.test(e.message)) {
          const msg = this.isProxyingToRemoteServer ? `No response from '${scheme}://${server}:${port}${path}' within ${this.serverStartupTimeoutMs}ms timeout.` + `Please make sure the remote server is running and accessible by Appium` : `Mac2Driver server is not listening within ${this.serverStartupTimeoutMs}ms timeout. ` + `Try to increase the value of 'serverStartupTimeout' capability, check the server logs ` + `and make sure the ${XCODEBUILD} host process could be started manually from a terminal`;
          throw new Error(msg);
        }

        throw e;
      }

      if (this.process) {
        const pid = this.process.pid;
        const childrenPids = await this.process.listChildrenPids();
        RUNNING_PROCESS_IDS.push(...childrenPids, pid);
        this.process.proc.on('exit', () => void _lodash.default.pull(RUNNING_PROCESS_IDS, pid));
        log.info(`The host process is ready within ${timer.getDuration().asMilliSeconds.toFixed(0)}ms`);
      }
    } else {
      log.info('The host process has already been listening. Proceeding with session creation');
    }

    await this.proxy.command('/session', 'POST', {
      capabilities: {
        firstMatch: [{}],
        alwaysMatch: caps
      }
    });
  }

  async stopSession() {
    var _this$process4, _this$proxy;

    if (!this.isProxyingToRemoteServer && !((_this$process4 = this.process) === null || _this$process4 === void 0 ? void 0 : _this$process4.isRunning)) {
      log.info(`Mac2Driver session cannot be stopped, because the server is not running`);
      return;
    }

    if ((_this$proxy = this.proxy) === null || _this$proxy === void 0 ? void 0 : _this$proxy.sessionId) {
      try {
        await this.proxy.command(`/session/${this.proxy.sessionId}`, 'DELETE');
      } catch (e) {
        log.info(`Mac2Driver session cannot be deleted. Original error: ${e.message}`);
      }
    }
  }

}

const WDA_MAC_SERVER = new WDAMacServer();
var _default = WDA_MAC_SERVER;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
